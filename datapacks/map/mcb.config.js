const ffmpeg = require('fluent-ffmpeg')

function getOggTickDuration(filePath) {
	return new Promise((resolve, reject) => {
		ffmpeg.ffprobe(filePath, (err, metadata) => {
			if (err) {
				reject(err)
				return
			}
			resolve(Math.ceil(metadata.format.duration * 20))
		})
	})
}

function getVectorScoreNames(name, objective) {
	let xName = name
	let zName = name
	let xObjective = objective
	let zObjective = objective
	if (name.startsWith('@')) {
		xObjective = objective + '.x'
		zObjective = objective + '.z'
	} else {
		xName = name + '.x'
		zName = name + '.z'
	}
	return { xName, zName, xObjective, zObjective }
}

module.exports = {
	libDir: null, // default: "null", determine where mcb looks for libraries, default is the bundled install location
	generatedDirName: 'zzz', // default: "zzz", the name of the directory where mcb will put generated files
	internalScoreboardName: 'mcb.i', // default: "mcb.internal", the name of the internal scoreboard
	header: null, // default: "#This file was generated by mcb\n", the header to put at the top of supported generated files
	ioThreadCount: 1, // default: 1, the number of threads to use for IO operations, 1 is syncronous.
	getVectorScoreNames,
	// async setup(mcb) {
	// 	mcb.events.onPreBuild.subscribe(async () => {
	// 		const bossMusicDuration = await getOggTickDuration(
	// 			'../../resources/assets/cooking/sounds/music_boss.ogg'
	// 		)
	// 		const gameplayMusicDuration = await getOggTickDuration(
	// 			'../../resources/assets/cooking/sounds/music_gameplay.ogg'
	// 		)
	// 		const tutorialMusicDuration = await getOggTickDuration(
	// 			'../../resources/assets/cooking/sounds/music_tutorial.ogg'
	// 		)
	// 		console.log(`Boss Music Duration: ${bossMusicDuration} ticks`)
	// 		console.log(`Gameplay Music Duration: ${gameplayMusicDuration} ticks`)
	// 		console.log(`Tutorial Music Duration: ${tutorialMusicDuration} ticks`)
	// 	})
	// },
}

// const fs = require('fs')
// const path = require('path')

// function getLineCountRecursive(dir, suffix) {
// 	let lineCount = 0
// 	const files = fs.readdirSync(dir)
// 	for (const file of files) {
// 		const filePath = path.join(dir, file)
// 		if (fs.statSync(filePath).isDirectory()) {
// 			lineCount += getLineCountRecursive(filePath, suffix)
// 		} else if (file.endsWith(suffix)) {
// 			const content = fs.readFileSync(filePath, 'utf-8')
// 			lineCount += content.split('\n').length
// 		}
// 	}
// 	return lineCount
// }

// console.log(`Source Line Count: ${getLineCountRecursive(path.join(process.cwd(), 'src'), '.mcb')}`)
// console.log(
// 	`Actual Line Count: ${getLineCountRecursive(
// 		path.join(process.cwd(), '../animated_java/data'),
// 		'.mcfunction'
// 	)}`
// )
