function reset_sequence {
	data remove storage map:sequence queue
	data modify storage map:sequence queue set value []
	scoreboard players set #len i 3
	block {
		function sequence:add_random_layer
		scoreboard players remove #len i 1
		execute if score #len i matches 1.. run function ^0
	}
	function orders:update_orders_from_sequence
}


dir debug {
	function summon_next_pan_in_sequence {
		block { with storage map:sequence queue[0]
			$function pan:debug/summon_pan_baked_$(flavor)_frosted_$(frosting)
		}
	}
}


function add_random_layer {
	data remove storage temp:temp data

	block {
		execute store result score #random i run random value 0..2
		execute if score #random i matches 0 run data modify storage temp:temp data.flavor set value "vanilla"
		execute if score #random i matches 1 run data modify storage temp:temp data.flavor set value "chocolate"
		execute if score #random i matches 2 run data modify storage temp:temp data.flavor set value "strawberry"

		execute store result score #random i run random value 0..2
		execute if score #random i matches 0 run data modify storage temp:temp data.frosting set value "vanilla"
		execute if score #random i matches 1 run data modify storage temp:temp data.frosting set value "chocolate"
		execute if score #random i matches 2 run data modify storage temp:temp data.frosting set value "strawberry"

		# Prevent too many consecutive layers from being the same flavor and frosting
		execute store result score #same i run function sequence:compare_next with storage temp:temp data
		execute if score #same i matches 1 run function ^0
		execute store result score #same i run function sequence:compare_last with storage temp:temp data
		execute if score #same i matches 1 run function ^0
	}

	function sequence:add_layer with storage temp:temp data
}


function add_layer {
	#ARGS: {flavor: string, frosting: string}
	$data modify storage map:sequence queue append value {flavor:$(flavor), frosting:$(frosting)}
}


function compare_next {
	#ARGS: {flavor: string, frosting: string}
	data remove storage map:sequence temp
	data modify storage map:sequence temp set from storage map:sequence queue[0]
	$execute if data storage map:sequence {temp:{flavor:$(flavor), frosting:$(frosting)}} run return 1
	return 0
}

function compare_last {
	#ARGS: {flavor: string, frosting: string}
	data remove storage map:sequence temp
	data modify storage map:sequence temp set from storage map:sequence queue[-1]
	$execute if data storage map:sequence {temp:{flavor:$(flavor), frosting:$(frosting)}} run return 1
	return 0
}


function remove_next {
	data remove storage map:sequence queue[0]
	function sequence:add_random_layer
	function orders:update_orders_from_sequence
}